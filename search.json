[{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapgl.html","id":"switching-modes","dir":"Articles","previous_headings":"","what":"Switching modes","title":"new tmap modes","text":"Get current mode example ’ll create choropleth well per country. assign map map without showing . Now ’ll show map (now four) modes","code":"tmap_mode() #> ℹ Current tmap mode is \"plot\". #> ℹ Call `tmap::ttm()` to switch to mode \"view\". #> ℹ Call `tmap::rtm()` to rotate between all modes: \"plot\" -> \"view\" -> \"mapbox\" #>   -> \"maplibre\" map = tm_shape(World) +    tm_polygons(\"well_being\",     fill.scale = tm_scale_continuous(values = \"pu_gn\")) +   tm_crs(\"auto\")"},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapgl.html","id":"the-modes","dir":"Articles","previous_headings":"Switching modes","what":"The modes","title":"new tmap modes","text":"https://r-tmap.github.io/tmap.mapgl/reference/figures/mapbox_well_being.jpg","code":"tmap_mode(\"plot\") #> ℹ tmap mode set to \"plot\". map #> [plot mode] fit legend/component: Some legend items or map compoments do not #> fit well, and are therefore rescaled. #> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling. tmap_mode(\"view\") #> ℹ tmap mode set to \"view\". map #> [view mode] WebGL does not work (yet) with projected map projections, so it has #> been disabled. #> This message is displayed once per session. tmap_mode(\"mapbox\") map tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\". map"},{"path":"https://r-tmap.github.io/tmap.mapgl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martijn Tennekes. Author, maintainer.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tennekes M (2025). tmap.mapgl: Extension 'tmap' featuring two new modes: mapbox maplibre. R package version 0.1, https://github.com/r-tmap/tmap.mapgl.","code":"@Manual{,   title = {tmap.mapgl: Extension for 'tmap' featuring two new modes: mapbox and maplibre},   author = {Martijn Tennekes},   year = {2025},   note = {R package version 0.1},   url = {https://github.com/r-tmap/tmap.mapgl}, }"},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"tmapmapgl","dir":"","previous_headings":"","what":"Extension for tmap featuring two new modes: mapbox and maplibre","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"Two new tmap modes! Thanks mapgl, extension package features two new modes \"mapbox\" (free personal use) API key required, \"maplibre\".","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"","code":"# install.packages(\"remotes\") install_github(\"r-tmap/tmap\") install_github(\"r-tmap/tmap.mapgl\")"},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"","code":"library(tmap) library(tmap.mapgl)  # getting API: https://walker-data.com/mapgl/articles/getting-started.html # check API envir var: Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\")  tmap_mode(\"maplibre\") tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\"))  tm_shape(NLD_dist) +     tm_polygons(\"employment_rate\",                 fill.scale = tm_scale_intervals(values = \"scico.roma\"),                 lwd = 0.1) + tm_shape(NLD_muni) +     tm_polygons(fill = NULL, lwd = 1) +     tm_mapbox(pitch = 30) +     tm_basemap(.tmap_providers$dark)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapbox mode options — tm_mapbox","title":"Mapbox mode options — tm_mapbox","text":"Mapbox mode options. options specific mapbox mode.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapbox mode options — tm_mapbox","text":"","code":"tm_mapbox(style, pitch)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapbox mode options — tm_mapbox","text":"style : migrate tmap styles basemaps? pitch pitch angle","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mapbox mode options — tm_mapbox","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) # getting API: https://walker-data.com/mapgl/articles/getting-started.html # check API envir var: Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\")  tmap_mode(\"mapbox\") #> ℹ tmap mode set to \"mapbox\". tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\")) #> Error in mapgl::mapboxgl(center = c(0, 0), zoom = zoom, pitch = o$pitch,     style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session.  tm_shape(NLD_dist) +   tm_polygons(\"employment_rate\",     fill.scale = tm_scale_intervals(values = \"scico.roma\"),     lwd = 0.1) + tm_shape(NLD_muni) +   tm_polygons(fill = NULL, lwd = 1) + tm_mapbox(pitch = 60) + tm_basemap(.tmap_providers$dark) #> Error in mapgl::mapboxgl(center = ll, zoom = zoom, pitch = o$pitch, style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session. # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Maplibre mode options — tm_maplibre","title":"Maplibre mode options — tm_maplibre","text":"Maplibre mode options. options specific maplibre mode.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maplibre mode options — tm_maplibre","text":"","code":"tm_maplibre(style, pitch)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maplibre mode options — tm_maplibre","text":"style : migrate tmap styles basemaps? pitch pitch angle","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maplibre mode options — tm_maplibre","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\". tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\"))  tm_shape(NLD_dist) +   tm_polygons(\"employment_rate\",     fill.scale = tm_scale_intervals(values = \"scico.roma\"),     lwd = 0.1) +   tm_shape(NLD_muni) +   tm_polygons(fill = NULL, lwd = 1) + tm_mapbox(pitch = 60) + tm_basemap(.tmap_providers$dark) # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"Map layer draws 3d (extruded) polygons. Supported visual variables : `height` (), `fill` (fill color), `col` (border color), `lwd` (line width), `lty` (line type), `fill_alpha` (fill color alpha transparency) `col_alpha` (border color alpha transparency).","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"","code":"tm_polygons_3d(   height = tmap::tm_const(),   height.scale = tmap::tm_scale(),   height.legend = tmap::tm_legend(),   height.chart = tmap::tm_chart_none(),   height.free = NA,   fill = tmap::tm_const(),   fill.scale = tmap::tm_scale(),   fill.legend = tmap::tm_legend(),   fill.chart = tmap::tm_chart_none(),   fill.free = NA,   col = tmap::tm_const(),   col.scale = tmap::tm_scale(),   col.legend = tmap::tm_legend(),   col.chart = tmap::tm_chart_none(),   col.free = NA,   lwd = tmap::tm_const(),   lwd.scale = tmap::tm_scale(),   lwd.legend = tmap::tm_legend(),   lwd.chart = tmap::tm_chart_none(),   lwd.free = NA,   lty = tmap::tm_const(),   lty.scale = tmap::tm_scale(),   lty.legend = tmap::tm_legend(),   lty.chart = tmap::tm_chart_none(),   lty.free = NA,   fill_alpha = tmap::tm_const(),   fill_alpha.scale = tmap::tm_scale(),   fill_alpha.legend = tmap::tm_legend(),   fill_alpha.chart = tmap::tm_chart_none(),   fill_alpha.free = NA,   col_alpha = tmap::tm_const(),   col_alpha.scale = tmap::tm_scale(),   col_alpha.legend = tmap::tm_legend(),   col_alpha.chart = tmap::tm_chart_none(),   col_alpha.free = NA,   linejoin = \"round\",   lineend = \"round\",   plot.order = tmap::tm_plot_order(\"lwd\", reverse = TRUE, na.order = \"bottom\"),   zindex = NA,   group = NA,   group.control = \"check\",   popup.vars = NA,   popup.format = list(),   hover = NA,   id = \"\",   options = opt_tm_polygons_3d() )  opt_tm_polygons_3d(polygons.only = \"ifany\")"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"height, height.scale, height.legend, height.chart, height.free `r .doc_vv(\"height\")` fill, fill.scale, fill.legend, fill.chart, fill.free `r .doc_vv(\"fill\")` col, col.scale, col.legend, col.chart, col.free `r .doc_vv(\"col\")` lwd, lwd.scale, lwd.legend, lwd.chart, lwd.free `r .doc_vv(\"lwd\")` lty, lty.scale, lty.legend, lty.chart, lty.free `r .doc_vv(\"lty\")` fill_alpha, fill_alpha.scale, fill_alpha.chart, fill_alpha.legend, fill_alpha.free `r .doc_vv(\"fill_alpha\")` col_alpha, col_alpha.scale, col_alpha.legend, col_alpha.chart, col_alpha.free `r .doc_vv(\"col_alpha\")` linejoin, lineend Line join line end. See [gpar()][grid::gpar()] details. plot.order Specification order spatial features drawn. See [tm_plot_order()] details. zindex Map layers drawn top . `zindex` numbers (one map layer) determines stacking order. default map layers drawn order called. group Name group layer belongs. relevant view mode, layer groups can switched (see `group.control`) group.control view mode, group control determines layer groups can switched . Options: `\"radio\"` radio buttons (meaning one group can shown), `\"check\"` check boxes (multiple groups can shown), `\"none\"` control (group (de)selected). popup.vars names data variables shown popups `\"view\"` mode. Set popup.vars `TRUE` show variables shape object. Set popup.vars `FALSE` disable popups. Set `popup.vars` character vector variable names variables popups. default (`NA`) depends whether visual variables (e.g.`fill`) used. , shown. variables shape object shown. popup.format list formatting options popup values. See argument `legend.format` options. applicable numeric data variables. one list formatting options provided, applied numeric variables `popup.vars`. Also, (named) list lists can provided. case, list formatting options applied named variable. hover name data variable specifies hover labels (view mode ). Set `FALSE` disable hover labels. default `FALSE`, unless `id` specified. case, set `id`, id name data variable specifies indices spatial features. used `\"view\"` mode. options options passed corresponding `opt_<layer_function>` function polygons.polygon geometries shape object (defined [tm_shape()]) plotted? default `\"ifany\"`, means `TRUE` case geometry collection specified.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"visual variable arguments (e.g. `col`) can specified either data variable name (e.g., spatial vector attribute raster layer object specified [tm_shape()]), visual value (`col`, color expected). See vignette visual variables. Multiple values can specified: case facets created. facets can combined faceting data variables, specified [tm_facets()]. See vignette facets. - `*.scale` arguments determine used scale map data values visual variable values. can specified one available `tm_scale_*()` functions. default specified tmap option ([tm_options()]) `scales.var`. See vignette scales. - `*.legend` arguments determine used legend, specified [tm_legend()]. default legend settings determined tmap options ([tm_options()]) `legend.` . See vignette legends. - `*.chart` arguments specify additional charts, specified `tm_chart_`, e.g. [tm_chart_histogram()]. See vignette charts. - `*.free` arguments determine whether scales applied freely across facets, shared. logical value required. can also specified vector three logical values; determine whether scales applied freely per facet dimension. useful facets applied (see [tm_facets()]). maximally three facet dimensions: rows, columns, pages. applies facet grid ([tm_facets_grid()]). instance, `col.free = c(TRUE, FALSE, FALSE)` means visual variable `col`, row facets scale, therefore legend. facet wraps stacks ([tm_facets_wrap()] [tm_facets_stack()]) one facet dimension, `*.free` argument requires one logical value.","code":""},{"path":[]},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\". NLD_dist$pop_dens = NLD_dist$population / NLD_dist$area tm_shape(NLD_dist) +   tm_polygons_3d(height = \"pop_dens\",     fill = \"edu_appl_sci\",     fill.scale = tm_scale_intervals(style = \"kmeans\", values = \"-pu_gn\"),     fill.legend = tm_legend(\"Univeristy degree\")) + tm_maplibre(pitch = 45) #> No legends available in mode \"maplibre\" for map variables \"height\" # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmap.mapgl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","title":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","text":"new tmap mode, enabled via tmap_mode(\"mapbox\").","code":""},{"path":[]},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmap.mapgl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","text":"Martijn Tennekes mtennekes@gmail.com","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmap.mapgl-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) # getting API: https://walker-data.com/mapgl/articles/getting-started.html # check API envir var: Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\")  tmap_mode(\"mapbox\") #> ℹ tmap mode set to \"mapbox\". tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\")) #> Error in mapgl::mapboxgl(center = c(0, 0), zoom = zoom, pitch = o$pitch,     style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session.  tm_shape(NLD_dist) +   tm_polygons(\"employment_rate\",     fill.scale = tm_scale_intervals(values = \"scico.roma\"),     lwd = 0.1) + tm_shape(NLD_muni) +   tm_polygons(fill = NULL, lwd = 1) + tm_mapbox(pitch = 60) + tm_basemap(.tmap_providers$dark) #> Error in mapgl::mapboxgl(center = ll, zoom = zoom, pitch = o$pitch, style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session. # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmapMapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal tmap methods — tmapValuesCheck_height","title":"Internal tmap methods — tmapValuesCheck_height","text":"Internal tmap methods","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmapMapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal tmap methods — tmapValuesCheck_height","text":"","code":"tmapValuesCheck_height(x, is_var = TRUE)  tmapValuesIsDiv_height(x)  tmapValuesRange_height(x, n, isdiv)  tmapValuesVV_height(   x,   value.na,   isdiv,   n,   dvalues,   are_breaks,   midpoint,   range,   scale,   rep,   o )  tmapValuesSubmit_height(x, args)  tmapValuesScale_height(x, scale)  tmapValuesColorize_height(x, pc)  tmapValuesCVV_height(x, value.na, n, range, scale, rep, o)  tmapMapboxArrange(tms, nx, ncol, nrow, opts, knit, show, args, options)  tmapMaplibreArrange(tms, nx, ncol, nrow, opts, knit, show, args, options)  tmapMapboxTilesPrep(a, bs, id, o)  tmapMaplibreTilesPrep(a, bs, id, o)  tmapMapboxTiles(bi, bbx, facet_row, facet_col, facet_page, id, pane, group, o)  tmapMapboxGridPrep(a, bs, id, o)  tmapMapboxGrid(bi, bbx, facet_row, facet_col, facet_page, id, pane, group, o)  tmapMapboxGridXLab(bi, bbx, facet_row, facet_col, facet_page, o)  tmapMapboxGridYLab(bi, bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreTiles(   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  tmapMaplibreGridPrep(a, bs, id, o)  tmapMaplibreGrid(bi, bbx, facet_row, facet_col, facet_page, id, pane, group, o)  tmapMaplibreGridXLab(bi, bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreGridYLab(bi, bbx, facet_row, facet_col, facet_page, o)  # S3 method for class 'tm_title' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_title' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_title' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_title' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_compass' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_compass' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_compass' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_compass' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_scalebar' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_credits' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_credits' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_credits' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_credits' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_mouse_coordinates' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_title' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_title' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_title' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_title' tmapMaplibreLegPlot(comp, m, o)  # S3 method for class 'tm_compass' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_compass' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_compass' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_compass' tmapMaplibreLegPlot(comp, m, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_scalebar' tmapMaplibreLegPlot(comp, m, o)  # S3 method for class 'tm_credits' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_credits' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_credits' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_credits' tmapMaplibreLegPlot(comp, m, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreLegPlot(comp, m, o)  # S3 method for class 'tm_minimap' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_minimap' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_minimap' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_minimap' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_minimap' tmapMaplibreLegPlot(comp, m, o)  tmapMapboxCompPrepare(comp, o)  tmapMapboxCompHeight(comp, o)  tmapMapboxCompWidth(comp, o)  tmapMapboxLegPlot(comp, m, o)  tmapMaplibreCompPrepare(comp, o)  tmapMaplibreCompHeight(comp, o)  tmapMaplibreCompWidth(comp, o)  tmapMaplibreLegPlot(comp, m, o)  tmapMapboxInit(o, return.asp = FALSE, vp, prx, dg = NULL, ...)  tmapMaplibreInit(o, return.asp = FALSE, vp, prx, dg = NULL, ...)  tmapMapboxAux(o, q)  tmapMaplibreAux(o, q)  tmapMapboxPolygons(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMaplibrePolygons(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMapboxPolygons3d(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMaplibrePolygons3d(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMapboxLines(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMaplibreLines(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMapboxSymbols(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMaplibreSymbols(   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMapboxRaster(   shpTM,   dt,   gp,   pdt,   popup.format,   hdt,   idt,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMaplibreRaster(   shpTM,   dt,   gp,   pdt,   popup.format,   hdt,   idt,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMapboxText(   shpTM,   dt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_legend_standard_portrait' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_legend_standard_landscape' tmapMapboxLegPlot(comp, m, o)  # S3 method for class 'tm_legend_standard_portrait' tmapMaplibreLegPlot(comp, m, o)  # S3 method for class 'tm_legend_standard_landscape' tmapMaplibreLegPlot(comp, m, o)  tmapMapboxComp(   comp,   o,   facet_row = NULL,   facet_col = NULL,   facet_page,   class,   stack,   stack_auto,   pos.h,   pos.v,   bbox )  tmapMaplibreComp(   comp,   o,   facet_row = NULL,   facet_col = NULL,   facet_page,   class,   stack,   stack_auto,   pos.h,   pos.v,   bbox )  tmapMapboxProviders(credits)  tmapMaplibreProviders(credits)  tmapMapboxRun(o, q, show, knit, args)  tmapMaplibreRun(o, q, show, knit, args)  tmapMapboxShape(bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreShape(bbx, facet_row, facet_col, facet_page, o)  tmapMapboxOverlay(bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreOverlay(bbx, facet_row, facet_col, facet_page, o)  renderTmapMapbox(expr, env, quoted, execOnResize)  tmapOutputMapbox(outputId, width, height)  tmapProxyMapbox(mapId, session, x)  renderTmapMaplibre(expr, env, quoted, execOnResize)  tmapOutputMaplibre(outputId, width, height)  tmapProxyMaplibre(mapId, session, x)  tmapMapboxWrap(label, facet_row, facet_col, facet_page, o)  tmapMapboxXtab(label, facet_row, facet_col, facet_page, o)  tmapMaplibreWrap(label, facet_row, facet_col, facet_page, o)  tmapMaplibreXtab(label, facet_row, facet_col, facet_page, o)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmapMapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal tmap methods — tmapValuesCheck_height","text":"o list options args args tms tmap objects nx number facets ncol, nrow number rows columns opts options knit knit show show options options bs bs id id bi bi bbx bbx facet_row, facet_col, facet_page row column page id pane pane group group comp shape object m mapbox oer maplibre object return.asp return.asp vp vp q q shpTM, dt, pdt, popup.format, hdt, idt, gp args class class stack stack stack_auto stack_auto pos.h pos.h pos.v pos.v bbox bbox credits credits label label","code":""}]
