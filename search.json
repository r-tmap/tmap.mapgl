[{"path":"https://r-tmap.github.io/tmap.mapgl/articles/components.html","id":"example-metro","dir":"Articles","previous_headings":"","what":"Example: metro","title":"Geocoder","text":"","code":"tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\".  tm_shape(World) +   tm_borders(lwd = 2) + tm_shape(metro) +   tm_dots(size = \"pop2030\", fill = \"gold\") + tm_geocoder() #> No legends available in mode \"maplibre\" for map variables \"size\" #> [maplibre mode] Map component `tm_chart_none()` not supported in \"maplibre\" #> mode."},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapbox.html","id":"getting-and-using-the-api-key","dir":"Articles","previous_headings":"","what":"Getting and using the API key","title":"mapbox","text":"Go Mapbox Access Tokens follow instructions running usethis::edit_r_environ() creates/opens text file named .Renviron user’s home folder adding line MAPBOX_PUBLIC_TOKEN=\"abc123\", abc123 replaced API key obtained step 1.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapbox.html","id":"enable-mapbox-mode","dir":"Articles","previous_headings":"","what":"Enable \"mapbox\" mode","title":"mapbox","text":"","code":"tmap_mode(\"mapbox\") #> ℹ tmap mode set to \"mapbox\"."},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapbox.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"mapbox","text":"","code":"tm_shape(World) +    tm_polygons(\"well_being\",     fill.scale = tm_scale_continuous(values = \"pu_gn\"))"},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapbox.html","id":"basemaps","dir":"Articles","previous_headings":"","what":"Basemaps","title":"mapbox","text":"Mapbox offers several basemap providers, namely:","code":"tmap_providers() #>  [1] \"standard\"           \"streets\"            \"outdoors\"           #>  [4] \"light\"              \"dark\"               \"satellite\"          #>  [7] \"satellite-streets\"  \"navigation-day\"     \"navigation-night\"   #> [10] \"standard-satellite\" tm_shape(metro) +    tm_dots(size = \"pop2020\", fill = \"red\")+ tm_basemap(\"streets\")"},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapgl.html","id":"switching-modes","dir":"Articles","previous_headings":"","what":"Switching modes","title":"new tmap modes","text":"Get current mode example ’ll create choropleth well per country. assign map map without showing . Now ’ll show map (now four) modes","code":"tmap_mode() #> ℹ Current tmap mode is \"plot\". #> ℹ Call `tmap::ttm()` to switch to mode \"view\". #> ℹ Call `tmap::rtm()` to rotate between all modes: \"plot\" -> \"view\" -> \"mapbox\" #>   -> \"maplibre\" map = tm_shape(World) +    tm_polygons(\"well_being\",     fill.scale = tm_scale_continuous(values = \"pu_gn\"))"},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/mapgl.html","id":"the-modes","dir":"Articles","previous_headings":"Switching modes","what":"The modes","title":"new tmap modes","text":"","code":"tmap_mode(\"plot\") #> ℹ tmap mode set to \"plot\". map #> [tip] Consider a suitable map projection, e.g. by adding `+ tm_crs(\"auto\")`. #> [plot mode] fit legend/component: Some legend items or map compoments do not #> fit well, and are therefore rescaled. #> ℹ Set the tmap option `component.autoscale = FALSE` to disable rescaling. #> This message is displayed once per session. tmap_mode(\"view\") #> ℹ tmap mode set to \"view\". map #> [view mode] Map component `tm_chart_none()` not supported in \"view\" mode. #> This message is displayed once per session. tmap_mode(\"mapbox\") map tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\". map #> [maplibre mode] Map component `tm_chart_none()` not supported in \"maplibre\" #> mode. #> This message is displayed once per session."},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/maplibre.html","id":"enable-maplibre-mode","dir":"Articles","previous_headings":"","what":"Enable \"maplibre\" mode","title":"maplibre","text":"","code":"tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\"."},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/maplibre.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"maplibre","text":"","code":"tm_shape(World) +    tm_polygons(\"well_being\",     fill.scale = tm_scale_continuous(values = \"pu_gn\"))"},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/maplibre.html","id":"basemaps","dir":"Articles","previous_headings":"","what":"Basemaps","title":"maplibre","text":"Mapbox offers several basemap providers, namely:","code":"tmap_providers() #> [1] \"voyager\"     \"positron\"    \"dark-matter\" tm_shape(metro) +    tm_dots(size = \"pop2020\", fill = \"red\")+ tm_basemap(\"positron\") #> No legends available in mode \"maplibre\" for map variables \"size\" #> [maplibre mode] Map component `tm_chart_none()` not supported in \"maplibre\" #> mode."},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/polygons3d.html","id":"example-buildings-heights","dir":"Articles","previous_headings":"","what":"Example: buildings heights","title":"3D polygon layer","text":"time , need compute maximum building height, tm_scale_asis doesn’t support units yet.","code":"tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\".  # get vector buildings library(osmdata) #> Data (c) OpenStreetMap contributors, ODbL 1.0. https://www.openstreetmap.org/copyright buildings <- opq(bbox = \"Marina Bay, Singapore\") |>     add_osm_feature(key = \"building\") |>     osmdata_sf()  library(dplyr, warn.conflicts = FALSE) # only keep polygons buildings_poly <- buildings$osm_polygons |>   # convert height and levels from string to numeric   mutate(levels = as.numeric(`building:levels`),          height = as.numeric(height)) |>   # assume 2 levels if NA   mutate(levels = if_else(is.na(levels), 2, levels),          # assume height of 3 m per level if no height          height = if_else(is.na(height), levels * 3, height)) # maximum building height mx = max(buildings_poly$height)  # plot tm_shape(buildings_poly) +     tm_polygons_3d(height = \"height\", options = opt_tm_polygons_3d(height.max = mx)) +      tm_maplibre(pitch = 60) #> [maplibre mode] Map component `tm_chart_none()` not supported in \"maplibre\" #> mode. #> This message is displayed once per session."},{"path":"https://r-tmap.github.io/tmap.mapgl/articles/polygons3d.html","id":"example-population-density-data","dir":"Articles","previous_headings":"","what":"Example: population density data","title":"3D polygon layer","text":"","code":"NLD_dist$pop_dens = NLD_dist$population / NLD_dist$area  tm_shape(NLD_dist) +   tm_polygons_3d(height = \"pop_dens\",     fill = \"edu_appl_sci\",     fill.scale = tm_scale_intervals(style = \"kmeans\", values = \"-pu_gn\"),     fill.legend = tm_legend(\"University degree\")) + tm_maplibre(pitch = 45)"},{"path":"https://r-tmap.github.io/tmap.mapgl/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martijn Tennekes. Author, maintainer.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Tennekes M (2025). tmap.mapgl: Extension 'tmap' featuring two new modes: mapbox maplibre. R package version 0.1, https://github.com/r-tmap/tmap.mapgl.","code":"@Manual{,   title = {tmap.mapgl: Extension for 'tmap' featuring two new modes: mapbox and maplibre},   author = {Martijn Tennekes},   year = {2025},   note = {R package version 0.1},   url = {https://github.com/r-tmap/tmap.mapgl}, }"},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"tmapmapgl-two-new-tmap-modes-mapbox-and-maplibre-","dir":"","previous_headings":"","what":"Extension for tmap featuring two new modes: mapbox and maplibre","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"tmap R package visualizing spatial data. package extension. features two new modes: \"mapbox\" \"maplibre\".","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"package development development version tmap tmap.mapgl required.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"tmap","dir":"","previous_headings":"Installation","what":"tmap","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"Linux macOS users new working spatial data R, may fail since additional (non-R) libraries required (automatically installed Windows users).","code":"# install.packages(\"remotes\") remotes::install_github(\"r-tmap/tmap\")  # install.packages(\"pak\") pak::pak(\"r-tmap/tmap\")  # Or from r-universe install.packages(\"tmap\", repos = c(\"https://r-tmap.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"tmapmapgl","dir":"","previous_headings":"Installation","what":"tmap.mapgl","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"","code":"# install.packages(\"remotes\") remotes::install_github(\"r-tmap/tmap.mapgl\")  # install.packages(\"pak\") pak::pak(\"r-tmap/tmap.mapgl\")  # Or from r-universe install.packages(\"tmap.mapgl\", repos = c(\"https://r-tmap.r-universe.dev\", \"https://cloud.r-project.org\"))"},{"path":"https://r-tmap.github.io/tmap.mapgl/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Extension for tmap featuring two new modes: mapbox and maplibre","text":"tmap mapbox mode","code":"library(tmap) library(tmap.mapgl)  tmap_mode(\"mapbox\")  tm_shape(World) +    tm_polygons(\"well_being\",     fill.scale = tm_scale_continuous(values = \"pu_gn\"))"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_geocoder.html","id":null,"dir":"Reference","previous_headings":"","what":"Map component: (credits) text — tm_geocoder","title":"Map component: (credits) text — tm_geocoder","text":"Map component adds text, typically used credits. function [tm_title()] different default values.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_geocoder.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map component: (credits) text — tm_geocoder","text":"","code":"tm_geocoder(stack, position, group_id, z)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_geocoder.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map component: (credits) text — tm_geocoder","text":"stack stack map components, either `\"vertical\"` `\"horizontal\"`. position position specification component: object created `tm_pos_in()` `tm_pos_out()`. , shortcut, vector two values, specifying x y coordinates. first `\"left\"`, `\"center\"` `\"right\"` (upper case, meaning tighter map frame), second `\"top\"`, `\"center\"` `\"bottom\"`. Numeric values also supported, 0, 0 means left bottom 1, 1 right top. See also vignette positioning. case multiple components combined (stacked), use `group_id` specify `component` [tm_comp_group()]. group_id Component group id name. components (e.g. legends, titles, etc) `group_id` grouped. specifications placed (e.g. stacking, margins etc.) determined [tm_comp_group()] argument `id` correspond `group_id`. z z index, e.g. place component relative componets","code":""},{"path":[]},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Mapbox mode options — tm_mapbox","title":"Mapbox mode options — tm_mapbox","text":"Mapbox mode options. options specific mapbox mode.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mapbox mode options — tm_mapbox","text":"","code":"tm_mapbox(style, pitch)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mapbox mode options — tm_mapbox","text":"style : migrate tmap styles basemaps? pitch pitch angle","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_mapbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mapbox mode options — tm_mapbox","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) # getting API: https://walker-data.com/mapgl/articles/getting-started.html # check API envir var: Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\")  tmap_mode(\"mapbox\") #> ℹ tmap mode set to \"mapbox\". tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\")) #> [mapbox mode] Map component `tm_chart_none()` not supported in \"mapbox\" mode. #> This message is displayed once per session. #> Error in mapgl::mapboxgl(center = c(0, 0), zoom = zoom, pitch = o$pitch,     style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session.  tm_shape(NLD_dist) +   tm_polygons(\"employment_rate\",     fill.scale = tm_scale_intervals(values = \"scico.roma\"),     lwd = 0.1) + tm_shape(NLD_muni) +   tm_polygons(fill = NULL, lwd = 1) + tm_mapbox(pitch = 60) + tm_basemap(.tmap_providers$dark) #> Error in mapgl::mapboxgl(center = ll, zoom = zoom, pitch = o$pitch, style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session. # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":null,"dir":"Reference","previous_headings":"","what":"Maplibre mode options — tm_maplibre","title":"Maplibre mode options — tm_maplibre","text":"Maplibre mode options. options specific maplibre mode.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maplibre mode options — tm_maplibre","text":"","code":"tm_maplibre(style, pitch)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maplibre mode options — tm_maplibre","text":"style : migrate tmap styles basemaps? pitch pitch angle","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_maplibre.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Maplibre mode options — tm_maplibre","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\". tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\")) #> [maplibre mode] Map component `tm_chart_none()` not supported in \"maplibre\" #> mode. #> This message is displayed once per session.  tm_shape(NLD_dist) +   tm_polygons(\"employment_rate\",     fill.scale = tm_scale_intervals(values = \"scico.roma\"),     lwd = 0.1) +   tm_shape(NLD_muni) +   tm_polygons(fill = NULL, lwd = 1) + tm_mapbox(pitch = 60) + tm_basemap(.tmap_providers$dark) # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":null,"dir":"Reference","previous_headings":"","what":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"Map layer draws 3d (extruded) polygons. Supported visual variables : `height` (), `fill` (fill color), `col` (border color), `lwd` (line width), `lty` (line type), `fill_alpha` (fill color alpha transparency) `col_alpha` (border color alpha transparency).","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"","code":"tm_polygons_3d(   height = tmap::tm_const(),   height.scale = tmap::tm_scale(),   height.legend = tmap::tm_legend_hide(),   height.chart = tmap::tm_chart_none(),   height.free = NA,   fill = tmap::tm_const(),   fill.scale = tmap::tm_scale(),   fill.legend = tmap::tm_legend(),   fill.chart = tmap::tm_chart_none(),   fill.free = NA,   col = tmap::tm_const(),   col.scale = tmap::tm_scale(),   col.legend = tmap::tm_legend(),   col.chart = tmap::tm_chart_none(),   col.free = NA,   lwd = tmap::tm_const(),   lwd.scale = tmap::tm_scale(),   lwd.legend = tmap::tm_legend(),   lwd.chart = tmap::tm_chart_none(),   lwd.free = NA,   lty = tmap::tm_const(),   lty.scale = tmap::tm_scale(),   lty.legend = tmap::tm_legend(),   lty.chart = tmap::tm_chart_none(),   lty.free = NA,   fill_alpha = tmap::tm_const(),   fill_alpha.scale = tmap::tm_scale(),   fill_alpha.legend = tmap::tm_legend(),   fill_alpha.chart = tmap::tm_chart_none(),   fill_alpha.free = NA,   col_alpha = tmap::tm_const(),   col_alpha.scale = tmap::tm_scale(),   col_alpha.legend = tmap::tm_legend(),   col_alpha.chart = tmap::tm_chart_none(),   col_alpha.free = NA,   linejoin = \"round\",   lineend = \"round\",   plot.order = tmap::tm_plot_order(\"lwd\", reverse = TRUE, na.order = \"bottom\"),   zindex = NA,   group = NA,   group.control = \"check\",   popup.vars = NA,   popup.format = list(),   hover = NA,   id = \"\",   options = opt_tm_polygons_3d() )  opt_tm_polygons_3d(polygons.only = \"ifany\", height.max = NA, height.min = 0)"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"height, height.scale, height.legend, height.chart, height.free `r .doc_vv(\"height\")` fill, fill.scale, fill.legend, fill.chart, fill.free `r .doc_vv(\"fill\")` col, col.scale, col.legend, col.chart, col.free `r .doc_vv(\"col\")` lwd, lwd.scale, lwd.legend, lwd.chart, lwd.free `r .doc_vv(\"lwd\")` lty, lty.scale, lty.legend, lty.chart, lty.free `r .doc_vv(\"lty\")` fill_alpha, fill_alpha.scale, fill_alpha.chart, fill_alpha.legend, fill_alpha.free `r .doc_vv(\"fill_alpha\")` col_alpha, col_alpha.scale, col_alpha.legend, col_alpha.chart, col_alpha.free `r .doc_vv(\"col_alpha\")` linejoin, lineend Line join line end. See [gpar()][grid::gpar()] details. plot.order Specification order spatial features drawn. See [tm_plot_order()] details. zindex Map layers drawn top . `zindex` numbers (one map layer) determines stacking order. default map layers drawn order called. group Name group layer belongs. relevant view mode, layer groups can switched (see `group.control`) group.control view mode, group control determines layer groups can switched . Options: `\"radio\"` radio buttons (meaning one group can shown), `\"check\"` check boxes (multiple groups can shown), `\"none\"` control (group (de)selected). popup.vars names data variables shown popups `\"view\"` mode. Set popup.vars `TRUE` show variables shape object. Set popup.vars `FALSE` disable popups. Set `popup.vars` character vector variable names variables popups. default (`NA`) depends whether visual variables (e.g.`fill`) used. , shown. variables shape object shown. popup.format list formatting options popup values. See argument `legend.format` options. applicable numeric data variables. one list formatting options provided, applied numeric variables `popup.vars`. Also, (named) list lists can provided. case, list formatting options applied named variable. hover name data variable specifies hover labels (view mode ). Set `FALSE` disable hover labels. default `FALSE`, unless `id` specified. case, set `id`, id name data variable specifies indices spatial features. used `\"view\"` mode. options options passed corresponding `opt_<layer_function>` function polygons.polygon geometries shape object (defined [tm_shape()]) plotted? default `\"ifany\"`, means `TRUE` case geometry collection specified. height.max Maximum height. `NA` (default), set 10 percent square root bounding box area. height.min Minimum height. default 0.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"visual variable arguments (e.g. `col`) can specified either data variable name (e.g., spatial vector attribute raster layer object specified [tm_shape()]), visual value (`col`, color expected). See vignette visual variables. Multiple values can specified: case facets created. facets can combined faceting data variables, specified [tm_facets()]. See vignette facets. - `*.scale` arguments determine used scale map data values visual variable values. can specified one available `tm_scale_*()` functions. default specified tmap option ([tm_options()]) `scales.var`. See vignette scales. - `*.legend` arguments determine used legend, specified [tm_legend()]. default legend settings determined tmap options ([tm_options()]) `legend.` . See vignette legends. - `*.chart` arguments specify additional charts, specified `tm_chart_`, e.g. [tm_chart_histogram()]. See vignette charts. - `*.free` arguments determine whether scales applied freely across facets, shared. logical value required. can also specified vector three logical values; determine whether scales applied freely per facet dimension. useful facets applied (see [tm_facets()]). maximally three facet dimensions: rows, columns, pages. applies facet grid ([tm_facets_grid()]). instance, `col.free = c(TRUE, FALSE, FALSE)` means visual variable `col`, row facets scale, therefore legend. facet wraps stacks ([tm_facets_wrap()] [tm_facets_stack()]) one facet dimension, `*.free` argument requires one logical value.","code":""},{"path":[]},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_polygons_3d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Map layer: polygons in 3d (experimental) — tm_polygons_3d","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) tmap_mode(\"maplibre\") #> ℹ tmap mode set to \"maplibre\". NLD_dist$pop_dens = NLD_dist$population / NLD_dist$area tm_shape(NLD_dist) +   tm_polygons_3d(height = \"pop_dens\",     fill = \"edu_appl_sci\",     fill.scale = tm_scale_intervals(style = \"kmeans\", values = \"-pu_gn\"),     fill.legend = tm_legend(\"Univeristy degree\")) + tm_maplibre(pitch = 45) # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_rain.html","id":null,"dir":"Reference","previous_headings":"","what":"Map layer: let it rain! — tm_rain","title":"Map layer: let it rain! — tm_rain","text":"Map layer generates rain. available \"mapbox\" mode.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_rain.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map layer: let it rain! — tm_rain","text":"","code":"tm_rain(   density = 0.5,   intensity = 1,   color = \"#a8adbc\",   opacity = 0.7,   center_thinning = 0.57,   direction = c(0, 80),   droplet_size = c(2.6, 18.2),   distortion_strength = 0.7,   vignette = 1,   vignette_color = \"#464646\" )"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_rain.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map layer: let it rain! — tm_rain","text":"density number 0 1 controlling rain particles density. Default 0.5. intensity number 0 1 controlling rain particles movement speed. Default 1. color string specifying color rain droplets. Default \"#a8adbc\". opacity number 0 1 controlling rain particles opacity. Default 0.7. center_thinning number 0 1 controlling thinning factor rain particles center. Default 0.57. direction numeric vector length 2 defining azimuth polar angles rain direction. Default c(0, 80). droplet_size numeric vector length 2 controlling rain droplet size (x - normal direction, y - along direction). Default c(2.6, 18.2). distortion_strength number 0 1 controlling rain particles screen-space distortion strength. Default 0.7. vignette number 0 1 controlling screen-space vignette rain tinting effect intensity. Default 1.0. vignette_color string specifying rain vignette screen-space corners tint color. Default \"#464646\".","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_rain.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map layer: let it rain! — tm_rain","text":"Arguments default values taken [mapbox::set_rain()] (package version 0.2.2)","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_snow.html","id":null,"dir":"Reference","previous_headings":"","what":"Map layer: let it snow! — tm_snow","title":"Map layer: let it snow! — tm_snow","text":"Map layer generates snow.","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_snow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Map layer: let it snow! — tm_snow","text":"","code":"tm_snow(   density = 0.85,   intensity = 1,   color = \"#ffffff\",   opacity = 1,   center_thinning = 0.4,   direction = c(0, 50),   flake_size = 0.71,   vignette = 0.3,   vignette_color = \"#ffffff\" )"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_snow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Map layer: let it snow! — tm_snow","text":"density number 0 1 controlling snow particles density. Default 0.85. intensity number 0 1 controlling snow particles movement speed. Default 1.0. color string specifying color snow particles. Default \"#ffffff\". opacity number 0 1 controlling snow particles opacity. Default 1.0. center_thinning number 0 1 controlling thinning factor snow particles center. Default 0.4. direction numeric vector length 2 defining azimuth polar angles snow direction. Default c(0, 50). flake_size number 0 5 controlling snow flake particle size. Default 0.71. vignette number 0 1 controlling snow vignette screen-space effect. Default 0.3. vignette_color string specifying snow vignette screen-space corners tint color. Default \"#ffffff\".","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tm_snow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Map layer: let it snow! — tm_snow","text":"Arguments default values taken [mapbox::set_snow()] (package version 0.2.2)","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmap.mapgl-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","title":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","text":"new tmap mode, enabled via tmap_mode(\"mapbox\").","code":""},{"path":[]},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmap.mapgl-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","text":"Martijn Tennekes mtennekes@gmail.com","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmap.mapgl-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extension for tmap: maps are shown via mapbox.gl — tmap.mapgl-package","text":"","code":"# \\donttest{ library(tmap) library(tmap.mapgl) # getting API: https://walker-data.com/mapgl/articles/getting-started.html # check API envir var: Sys.getenv(\"MAPBOX_PUBLIC_TOKEN\")  tmap_mode(\"mapbox\") #> ℹ tmap mode set to \"mapbox\". tm_shape(World) +   tm_polygons(\"HPI\", fill.scale = tm_scale_intervals(values = \"brewer.rd_yl_gn\")) #> Error in mapgl::mapboxgl(center = c(0, 0), zoom = zoom, pitch = o$pitch,     style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session.  tm_shape(NLD_dist) +   tm_polygons(\"employment_rate\",     fill.scale = tm_scale_intervals(values = \"scico.roma\"),     lwd = 0.1) + tm_shape(NLD_muni) +   tm_polygons(fill = NULL, lwd = 1) + tm_mapbox(pitch = 60) + tm_basemap(.tmap_providers$dark) #> Error in mapgl::mapboxgl(center = ll, zoom = zoom, pitch = o$pitch, style = style): A Mapbox access token is required. Get one from your account at https://www.mapbox.com, and do one of the following: #> ℹ Run `usethis::edit_r_environ()` and add the line MAPBOX_PUBLIC_TOKEN='your_token_goes_here'; #> ℹ Install the mapboxapi R package and run `mb_access_token('your_token_goes_here', install = TRUE)` #> ℹ Alternatively, supply your token to the `access_token` parameter in this function or run `Sys.setenv(MAPBOX_PUBLIC_TOKEN='your_token_goes_here') for this session. # }"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmapMapbox.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal tmap methods — tmapValuesCheck_height","title":"Internal tmap methods — tmapValuesCheck_height","text":"Internal tmap methods","code":""},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmapMapbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal tmap methods — tmapValuesCheck_height","text":"","code":"tmapValuesCheck_height(x, is_var = TRUE)  tmapValuesIsDiv_height(x)  tmapValuesRange_height(x, n, isdiv)  tmapValuesVV_height(   x,   value.na,   isdiv,   n,   dvalues,   are_breaks,   midpoint,   range,   scale,   rep,   o )  tmapValuesSubmit_height(x, args)  tmapValuesScale_height(x, scale)  tmapValuesColorize_height(x, pc)  tmapValuesCVV_height(x, value.na, n, range, scale, rep, o)  tmapMapboxArrange(tms, nx, ncol, nrow, opts, knit, show, args, options)  tmapMaplibreArrange(tms, nx, ncol, nrow, opts, knit, show, args, options)  tmapMapboxAuxPrepare(a, bs, id, o)  # Default S3 method tmapMapboxAuxPrepare(a, bs, id, o)  tmapMapboxAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # Default S3 method tmapMapboxAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  tmapMaplibreAuxPrepare(a, bs, id, o)  # Default S3 method tmapMaplibreAuxPrepare(a, bs, id, o)  tmapMaplibreAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # Default S3 method tmapMaplibreAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # S3 method for class 'tm_aux_basemap' tmapMapboxAuxPrepare(a, bs, id, o)  # S3 method for class 'tm_aux_basemap' tmapMaplibreAuxPrepare(a, bs, id, o)  # S3 method for class 'tm_aux_tiles' tmapMapboxAuxPrepare(a, bs, id, o)  # S3 method for class 'tm_aux_tiles' tmapMaplibreAuxPrepare(a, bs, id, o)  # S3 method for class 'tm_aux_basemap' tmapMapboxAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # S3 method for class 'tm_aux_basemap' tmapMaplibreAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # S3 method for class 'tm_aux_tiles' tmapMapboxAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # S3 method for class 'tm_aux_tiles' tmapMaplibreAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  tmapMapboxGridXLab(bi, bbx, facet_row, facet_col, facet_page, o)  tmapMapboxGridYLab(bi, bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreGridXLab(bi, bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreGridYLab(bi, bbx, facet_row, facet_col, facet_page, o)  # S3 method for class 'tm_title' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_title' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_title' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_title' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_scalebar' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_snow' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_snow' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_snow' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_snow' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_title' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_title' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_title' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_title' tmapMaplibreCompPlot(comp, m, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_scalebar' tmapMaplibreCompPlot(comp, m, o)  # S3 method for class 'tm_credits' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_credits' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_credits' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_credits' tmapMaplibreCompPlot(comp, m, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_mouse_coordinates' tmapMaplibreCompPlot(comp, m, o)  # S3 method for class 'tm_minimap' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_minimap' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_minimap' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_minimap' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_minimap' tmapMaplibreCompPlot(comp, m, o)  tmapMapboxCompPrepare(comp, o)  tmapMapboxCompHeight(comp, o)  tmapMapboxCompWidth(comp, o)  tmapMapboxCompPlot(comp, m, o)  # Default S3 method tmapMapboxCompPrepare(comp, o)  tmapMaplibreCompPrepare(comp, o)  tmapMaplibreCompHeight(comp, o)  tmapMaplibreCompWidth(comp, o)  tmapMaplibreCompPlot(comp, m, o)  # Default S3 method tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_geocoder' tmapMapboxCompPrepare(comp, o)  # S3 method for class 'tm_geocoder' tmapMapboxCompHeight(comp, o)  # S3 method for class 'tm_geocoder' tmapMapboxCompWidth(comp, o)  # S3 method for class 'tm_geocoder' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_geocoder' tmapMaplibreCompPrepare(comp, o)  # S3 method for class 'tm_geocoder' tmapMaplibreCompHeight(comp, o)  # S3 method for class 'tm_geocoder' tmapMaplibreCompWidth(comp, o)  # S3 method for class 'tm_geocoder' tmapMaplibreCompPlot(comp, m, o)  tmapMapboxInit(o, return.asp = FALSE, vp, prx, dg = NULL, ...)  tmapMaplibreInit(o, return.asp = FALSE, vp, prx, dg = NULL, ...)  tmapMapboxAux(o, q)  tmapMaplibreAux(o, q)  # S3 method for class 'tm_legend_portrait' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_legend_landscape' tmapMapboxCompPlot(comp, m, o)  # S3 method for class 'tm_legend_portrait' tmapMaplibreCompPlot(comp, m, o)  # S3 method for class 'tm_legend_landscape' tmapMaplibreCompPlot(comp, m, o)  tmapMapboxComp(   comp,   o,   facet_row = NULL,   facet_col = NULL,   facet_page,   class,   stack,   stack_auto,   pos.h,   pos.v,   bbox )  tmapMaplibreComp(   comp,   o,   facet_row = NULL,   facet_col = NULL,   facet_page,   class,   stack,   stack_auto,   pos.h,   pos.v,   bbox )  tmapMapboxProviders(credits)  tmapMaplibreProviders(credits)  tmapMapboxRun(o, q, show, knit, args)  tmapMaplibreRun(o, q, show, knit, args)  tmapMapboxShape(bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreShape(bbx, facet_row, facet_col, facet_page, o)  tmapMapboxOverlay(bbx, facet_row, facet_col, facet_page, o)  tmapMaplibreOverlay(bbx, facet_row, facet_col, facet_page, o)  renderTmapMapbox(expr, env, quoted, execOnResize)  tmapOutputMapbox(outputId, width, height)  tmapProxyMapbox(mapId, session, x)  renderTmapMaplibre(expr, env, quoted, execOnResize)  tmapOutputMaplibre(outputId, width, height)  tmapProxyMaplibre(mapId, session, x)  tmapMapboxWrap(label, facet_row, facet_col, facet_page, o)  tmapMapboxXtab(label, facet_row, facet_col, facet_page, o)  tmapMaplibreWrap(label, facet_row, facet_col, facet_page, o)  tmapMaplibreXtab(label, facet_row, facet_col, facet_page, o)  # S3 method for class 'tm_aux_snow' tmapMapboxAuxPrepare(a, bs, id, o)  # S3 method for class 'tm_aux_snow' tmapMapboxAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  # S3 method for class 'tm_aux_rain' tmapMapboxAuxPrepare(a, bs, id, o)  # S3 method for class 'tm_aux_rain' tmapMapboxAuxPlot(   a,   bi,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o )  tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # Default S3 method tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_polygons' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_polygons_3d' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_lines' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_symbols' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_raster' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_fill' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_borders' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_dots' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_bubbles' tmapMapboxDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # Default S3 method tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_polygons' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_polygons_3d' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_lines' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_symbols' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_raster' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_fill' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_borders' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_dots' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )  # S3 method for class 'tm_data_bubbles' tmapMaplibreDataPlot(   a,   shpTM,   dt,   pdt,   popup.format,   hdt,   idt,   gp,   bbx,   facet_row,   facet_col,   facet_page,   id,   pane,   group,   o,   ... )"},{"path":"https://r-tmap.github.io/tmap.mapgl/reference/tmapMapbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Internal tmap methods — tmapValuesCheck_height","text":"o list options args args tms tmap objects nx number facets ncol, nrow number rows columns opts options knit knit show show options options bs bs id id bi bi bbx bbx facet_row, facet_col, facet_page row column page id pane pane group group comp shape object m mapbox oer maplibre object return.asp return.asp vp vp q q class class stack stack stack_auto stack_auto pos.h pos.h pos.v pos.v bbox bbox credits credits label label shpTM, dt, pdt, popup.format, hdt, idt, gp args","code":""}]
